/* Generated by wayland-scanner 1.18.0 */

#ifndef TABLET_UNSTABLE_V1_CLIENT_PROTOCOL_H
#define TABLET_UNSTABLE_V1_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_tablet_unstable_v1 The tablet_unstable_v1 protocol
 * Wayland protocol for graphics tablets
 *
 * @section page_desc_tablet_unstable_v1 Description
 *
 * This description provides a high-level overview of the interplay between
 * the interfaces defined this protocol. For details, see the protocol
 * specification.
 *
 * More than one tablet may exist, and device-specifics matter. Tablets are
 * not represented by a single virtual device like wl_pointer. A client
 * binds to the tablet manager object which is just a proxy object. From
 * that, the client requests wp_tablet_manager.get_tablet_seat(wl_seat)
 * and that returns the actual interface that has all the tablets. With
 * this indirection, we can avoid merging wp_tablet into the actual Wayland
 * protocol, a long-term benefit.
 *
 * The wp_tablet_seat sends a "tablet added" event for each tablet
 * connected. That event is followed by descriptive events about the
 * hardware; currently that includes events for name, vid/pid and
 * a wp_tablet.path event that describes a local path. This path can be
 * used to uniquely identify a tablet or get more information through
 * libwacom. Emulated or nested tablets can skip any of those, e.g. a
 * virtual tablet may not have a vid/pid. The sequence of descriptive
 * events is terminated by a wp_tablet.done event to signal that a client
 * may now finalize any initialization for that tablet.
 *
 * Events from tablets require a tool in proximity. Tools are also managed
 * by the tablet seat; a "tool added" event is sent whenever a tool is new
 * to the compositor. That event is followed by a number of descriptive
 * events about the hardware; currently that includes capabilities,
 * hardware id and serial number, and tool type. Similar to the tablet
 * interface, a wp_tablet_tool.done event is sent to terminate that initial
 * sequence.
 *
 * Any event from a tool happens on the wp_tablet_tool interface. When the
 * tool gets into proximity of the tablet, a proximity_in event is sent on
 * the wp_tablet_tool interface, listing the tablet and the surface. That
 * event is followed by a motion event with the coordinates. After that,
 * it's the usual motion, axis, button, etc. events. The protocol's
 * serialisation means events are grouped by wp_tablet_tool.frame events.
 *
 * Two special events (that don't exist in X) are down and up. They signal
 * "tip touching the surface". For tablets without real proximity
 * detection, the sequence is: proximity_in, motion, down, frame.
 *
 * When the tool leaves proximity, a proximity_out event is sent. If any
 * button is still down, a button release event is sent before this
 * proximity event. These button events are sent in the same frame as the
 * proximity event to signal to the client that the buttons were held when
 * the tool left proximity.
 *
 * If the tool moves out of the surface but stays in proximity (i.e.
 * between windows), compositor-specific grab policies apply. This usually
 * means that the proximity-out is delayed until all buttons are released.
 *
 * Moving a tool physically from one tablet to the other has no real effect
 * on the protocol, since we already have the tool object from the "tool
 * added" event. All the information is already there and the proximity
 * events on both tablets are all a client needs to reconstruct what
 * happened.
 *
 * Some extra axes are normalized, i.e. the client knows the range as
 * specified in the protocol (e.g. [0, 65535]), the granularity however is
 * unknown. The current normalized axes are pressure, distance, and slider.
 *
 * Other extra axes are in physical units as specified in the protocol.
 * The current extra axes with physical units are tilt, rotation and
 * wheel rotation.
 *
 * Since tablets work independently of the pointer controlled by the mouse,
 * the focus handling is independent too and controlled by proximity.
 * The wp_tablet_tool.set_cursor request sets a tool-specific cursor.
 * This cursor surface may be the same as the mouse cursor, and it may be
 * the same across tools but it is possible to be more fine-grained. For
 * example, a client may set different cursors for the pen and eraser.
 *
 * Tools are generally independent of tablets and it is
 * compositor-specific policy when a tool can be removed. Common approaches
 * will likely include some form of removing a tool when all tablets the
 * tool was used on are removed.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible changes
 * may be added together with the corresponding interface version bump.
 * Backward incompatible changes are done by bumping the version number in
 * the protocol and interface names and resetting the interface version.
 * Once the protocol is to be declared stable, the 'z' prefix and the
 * version number in the protocol and interface names are removed and the
 * interface version number is reset.
 *
 * @section page_ifaces_tablet_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_tablet_manager_v1 - controller object for graphic tablet devices
 * - @subpage page_iface_zwp_tablet_seat_v1 - controller object for graphic tablet devices of a seat
 * - @subpage page_iface_zwp_tablet_tool_v1 - a physical tablet tool
 * - @subpage page_iface_zwp_tablet_v1 - graphics tablet device
 * @section page_copyright_tablet_unstable_v1 Copyright
 * <pre>
 *
 * Copyright 2014 © Stephen "Lyude" Chandler Paul
 * Copyright 2015-2016 © Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * </pre>
 */
struct wl_seat;
struct wl_surface;
struct zwp_tablet_manager_v1;
struct zwp_tablet_seat_v1;
struct zwp_tablet_tool_v1;
struct zwp_tablet_v1;

/**
 * @page page_iface_zwp_tablet_manager_v1 zwp_tablet_manager_v1
 * @section page_iface_zwp_tablet_manager_v1_desc Description
 *
 * An object that provides access to the graphics tablets available on this
 * system. All tablets are associated with a seat, to get access to the
 * actual tablets, use wp_tablet_manager.get_tablet_seat.
 * @section page_iface_zwp_tablet_manager_v1_api API
 * See @ref iface_zwp_tablet_manager_v1.
 */
/**
 * @defgroup iface_zwp_tablet_manager_v1 The zwp_tablet_manager_v1 interface
 *
 * An object that provides access to the graphics tablets available on this
 * system. All tablets are associated with a seat, to get access to the
 * actual tablets, use wp_tablet_manager.get_tablet_seat.
 */
extern const struct wl_interface zwp_tablet_manager_v1_interface;
/**
 * @page page_iface_zwp_tablet_seat_v1 zwp_tablet_seat_v1
 * @section page_iface_zwp_tablet_seat_v1_desc Description
 *
 * An object that provides access to the graphics tablets available on this
 * seat. After binding to this interface, the compositor sends a set of
 * wp_tablet_seat.tablet_added and wp_tablet_seat.tool_added events.
 * @section page_iface_zwp_tablet_seat_v1_api API
 * See @ref iface_zwp_tablet_seat_v1.
 */
/**
 * @defgroup iface_zwp_tablet_seat_v1 The zwp_tablet_seat_v1 interface
 *
 * An object that provides access to the graphics tablets available on this
 * seat. After binding to this interface, the compositor sends a set of
 * wp_tablet_seat.tablet_added and wp_tablet_seat.tool_added events.
 */
extern const struct wl_interface zwp_tablet_seat_v1_interface;
/**
 * @page page_iface_zwp_tablet_tool_v1 zwp_tablet_tool_v1
 * @section page_iface_zwp_tablet_tool_v1_desc Description
 *
 * An object that represents a physical tool that has been, or is
 * currently in use with a tablet in this seat. Each wp_tablet_tool
 * object stays valid until the client destroys it; the compositor
 * reuses the wp_tablet_tool object to indicate that the object's
 * respective physical tool has come into proximity of a tablet again.
 *
 * A wp_tablet_tool object's relation to a physical tool depends on the
 * tablet's ability to report serial numbers. If the tablet supports
 * this capability, then the object represents a specific physical tool
 * and can be identified even when used on multiple tablets.
 *
 * A tablet tool has a number of static characteristics, e.g. tool type,
 * hardware_serial and capabilities. These capabilities are sent in an
 * event sequence after the wp_tablet_seat.tool_added event before any
 * actual events from this tool. This initial event sequence is
 * terminated by a wp_tablet_tool.done event.
 *
 * Tablet tool events are grouped by wp_tablet_tool.frame events.
 * Any events received before a wp_tablet_tool.frame event should be
 * considered part of the same hardware state change.
 * @section page_iface_zwp_tablet_tool_v1_api API
 * See @ref iface_zwp_tablet_tool_v1.
 */
/**
 * @defgroup iface_zwp_tablet_tool_v1 The zwp_tablet_tool_v1 interface
 *
 * An object that represents a physical tool that has been, or is
 * currently in use with a tablet in this seat. Each wp_tablet_tool
 * object stays valid until the client destroys it; the compositor
 * reuses the wp_tablet_tool object to indicate that the object's
 * respective physical tool has come into proximity of a tablet again.
 *
 * A wp_tablet_tool object's relation to a physical tool depends on the
 * tablet's ability to report serial numbers. If the tablet supports
 * this capability, then the object represents a specific physical tool
 * and can be identified even when used on multiple tablets.
 *
 * A tablet tool has a number of static characteristics, e.g. tool type,
 * hardware_serial and capabilities. These capabilities are sent in an
 * event sequence after the wp_tablet_seat.tool_added event before any
 * actual events from this tool. This initial event sequence is
 * terminated by a wp_tablet_tool.done event.
 *
 * Tablet tool events are grouped by wp_tablet_tool.frame events.
 * Any events received before a wp_tablet_tool.frame event should be
 * considered part of the same hardware state change.
 */
extern const struct wl_interface zwp_tablet_tool_v1_interface;
/**
 * @page page_iface_zwp_tablet_v1 zwp_tablet_v1
 * @section page_iface_zwp_tablet_v1_desc Description
 *
 * The wp_tablet interface represents one graphics tablet device. The
 * tablet interface itself does not generate events; all events are
 * generated by wp_tablet_tool objects when in proximity above a tablet.
 *
 * A tablet has a number of static characteristics, e.g. device name and
 * pid/vid. These capabilities are sent in an event sequence after the
 * wp_tablet_seat.tablet_added event. This initial event sequence is
 * terminated by a wp_tablet.done event.
 * @section page_iface_zwp_tablet_v1_api API
 * See @ref iface_zwp_tablet_v1.
 */
/**
 * @defgroup iface_zwp_tablet_v1 The zwp_tablet_v1 interface
 *
 * The wp_tablet interface represents one graphics tablet device. The
 * tablet interface itself does not generate events; all events are
 * generated by wp_tablet_tool objects when in proximity above a tablet.
 *
 * A tablet has a number of static characteristics, e.g. device name and
 * pid/vid. These capabilities are sent in an event sequence after the
 * wp_tablet_seat.tablet_added event. This initial event sequence is
 * terminated by a wp_tablet.done event.
 */
extern const struct wl_interface zwp_tablet_v1_interface;

#define ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT 0
#define ZWP_TABLET_MANAGER_V1_DESTROY 1


/**
 * @ingroup iface_zwp_tablet_manager_v1
 */
#define ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_manager_v1
 */
#define ZWP_TABLET_MANAGER_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zwp_tablet_manager_v1 */
static inline void
zwp_tablet_manager_v1_set_user_data(struct zwp_tablet_manager_v1 *zwp_tablet_manager_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zwp_tablet_manager_v1, user_data);
}

/** @ingroup iface_zwp_tablet_manager_v1 */
static inline void *
zwp_tablet_manager_v1_get_user_data(struct zwp_tablet_manager_v1 *zwp_tablet_manager_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zwp_tablet_manager_v1);
}

static inline uint32_t
zwp_tablet_manager_v1_get_version(struct zwp_tablet_manager_v1 *zwp_tablet_manager_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zwp_tablet_manager_v1);
}

/**
 * @ingroup iface_zwp_tablet_manager_v1
 *
 * Get the wp_tablet_seat object for the given seat. This object
 * provides access to all graphics tablets in this seat.
 */
static inline struct zwp_tablet_seat_v1 *
zwp_tablet_manager_v1_get_tablet_seat(struct zwp_tablet_manager_v1 *zwp_tablet_manager_v1, struct wl_seat *seat)
{
	struct wl_proxy *tablet_seat;

	tablet_seat = wl_proxy_marshal_constructor((struct wl_proxy *) zwp_tablet_manager_v1,
			 ZWP_TABLET_MANAGER_V1_GET_TABLET_SEAT, &zwp_tablet_seat_v1_interface, NULL, seat);

	return (struct zwp_tablet_seat_v1 *) tablet_seat;
}

/**
 * @ingroup iface_zwp_tablet_manager_v1
 *
 * Destroy the wp_tablet_manager object. Objects created from this
 * object are unaffected and should be destroyed separately.
 */
static inline void
zwp_tablet_manager_v1_destroy(struct zwp_tablet_manager_v1 *zwp_tablet_manager_v1)
{
	wl_proxy_marshal((struct wl_proxy *) zwp_tablet_manager_v1,
			 ZWP_TABLET_MANAGER_V1_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) zwp_tablet_manager_v1);
}

/**
 * @ingroup iface_zwp_tablet_seat_v1
 * @struct zwp_tablet_seat_v1_listener
 */
struct zwp_tablet_seat_v1_listener {
	/**
	 * new device notification
	 *
	 * This event is sent whenever a new tablet becomes available on
	 * this seat. This event only provides the object id of the tablet,
	 * any static information about the tablet (device name, vid/pid,
	 * etc.) is sent through the wp_tablet interface.
	 * @param id the newly added graphics tablet
	 */
	void (*tablet_added)(void *data,
			     struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1,
			     struct zwp_tablet_v1 *id);
	/**
	 * a new tool has been used with a tablet
	 *
	 * This event is sent whenever a tool that has not previously
	 * been used with a tablet comes into use. This event only provides
	 * the object id of the tool; any static information about the tool
	 * (capabilities, type, etc.) is sent through the wp_tablet_tool
	 * interface.
	 * @param id the newly added tablet tool
	 */
	void (*tool_added)(void *data,
			   struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1,
			   struct zwp_tablet_tool_v1 *id);
};

/**
 * @ingroup iface_zwp_tablet_seat_v1
 */
static inline int
zwp_tablet_seat_v1_add_listener(struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1,
				const struct zwp_tablet_seat_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) zwp_tablet_seat_v1,
				     (void (**)(void)) listener, data);
}

#define ZWP_TABLET_SEAT_V1_DESTROY 0

/**
 * @ingroup iface_zwp_tablet_seat_v1
 */
#define ZWP_TABLET_SEAT_V1_TABLET_ADDED_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_seat_v1
 */
#define ZWP_TABLET_SEAT_V1_TOOL_ADDED_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_tablet_seat_v1
 */
#define ZWP_TABLET_SEAT_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zwp_tablet_seat_v1 */
static inline void
zwp_tablet_seat_v1_set_user_data(struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zwp_tablet_seat_v1, user_data);
}

/** @ingroup iface_zwp_tablet_seat_v1 */
static inline void *
zwp_tablet_seat_v1_get_user_data(struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zwp_tablet_seat_v1);
}

static inline uint32_t
zwp_tablet_seat_v1_get_version(struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zwp_tablet_seat_v1);
}

/**
 * @ingroup iface_zwp_tablet_seat_v1
 *
 * Destroy the wp_tablet_seat object. Objects created from this
 * object are unaffected and should be destroyed separately.
 */
static inline void
zwp_tablet_seat_v1_destroy(struct zwp_tablet_seat_v1 *zwp_tablet_seat_v1)
{
	wl_proxy_marshal((struct wl_proxy *) zwp_tablet_seat_v1,
			 ZWP_TABLET_SEAT_V1_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) zwp_tablet_seat_v1);
}

#ifndef ZWP_TABLET_TOOL_V1_TYPE_ENUM
#define ZWP_TABLET_TOOL_V1_TYPE_ENUM
/**
 * @ingroup iface_zwp_tablet_tool_v1
 * a physical tool type
 *
 * Describes the physical type of a tool. The physical type of a tool
 * generally defines its base usage.
 *
 * The mouse tool represents a mouse-shaped tool that is not a relative
 * device but bound to the tablet's surface, providing absolute
 * coordinates.
 *
 * The lens tool is a mouse-shaped tool with an attached lens to
 * provide precision focus.
 */
enum zwp_tablet_tool_v1_type {
	/**
	 * Pen
	 */
	ZWP_TABLET_TOOL_V1_TYPE_PEN = 0x140,
	/**
	 * Eraser
	 */
	ZWP_TABLET_TOOL_V1_TYPE_ERASER = 0x141,
	/**
	 * Brush
	 */
	ZWP_TABLET_TOOL_V1_TYPE_BRUSH = 0x142,
	/**
	 * Pencil
	 */
	ZWP_TABLET_TOOL_V1_TYPE_PENCIL = 0x143,
	/**
	 * Airbrush
	 */
	ZWP_TABLET_TOOL_V1_TYPE_AIRBRUSH = 0x144,
	/**
	 * Finger
	 */
	ZWP_TABLET_TOOL_V1_TYPE_FINGER = 0x145,
	/**
	 * Mouse
	 */
	ZWP_TABLET_TOOL_V1_TYPE_MOUSE = 0x146,
	/**
	 * Lens
	 */
	ZWP_TABLET_TOOL_V1_TYPE_LENS = 0x147,
};
#endif /* ZWP_TABLET_TOOL_V1_TYPE_ENUM */

#ifndef ZWP_TABLET_TOOL_V1_CAPABILITY_ENUM
#define ZWP_TABLET_TOOL_V1_CAPABILITY_ENUM
/**
 * @ingroup iface_zwp_tablet_tool_v1
 * capability flags for a tool
 *
 * Describes extra capabilities on a tablet.
 *
 * Any tool must provide x and y values, extra axes are
 * device-specific.
 */
enum zwp_tablet_tool_v1_capability {
	/**
	 * Tilt axes
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_TILT = 1,
	/**
	 * Pressure axis
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_PRESSURE = 2,
	/**
	 * Distance axis
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_DISTANCE = 3,
	/**
	 * Z-rotation axis
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_ROTATION = 4,
	/**
	 * Slider axis
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_SLIDER = 5,
	/**
	 * Wheel axis
	 */
	ZWP_TABLET_TOOL_V1_CAPABILITY_WHEEL = 6,
};
#endif /* ZWP_TABLET_TOOL_V1_CAPABILITY_ENUM */

#ifndef ZWP_TABLET_TOOL_V1_BUTTON_STATE_ENUM
#define ZWP_TABLET_TOOL_V1_BUTTON_STATE_ENUM
/**
 * @ingroup iface_zwp_tablet_tool_v1
 * physical button state
 *
 * Describes the physical state of a button that produced the button event.
 */
enum zwp_tablet_tool_v1_button_state {
	/**
	 * button is not pressed
	 */
	ZWP_TABLET_TOOL_V1_BUTTON_STATE_RELEASED = 0,
	/**
	 * button is pressed
	 */
	ZWP_TABLET_TOOL_V1_BUTTON_STATE_PRESSED = 1,
};
#endif /* ZWP_TABLET_TOOL_V1_BUTTON_STATE_ENUM */

#ifndef ZWP_TABLET_TOOL_V1_ERROR_ENUM
#define ZWP_TABLET_TOOL_V1_ERROR_ENUM
enum zwp_tablet_tool_v1_error {
	/**
	 * given wl_surface has another role
	 */
	ZWP_TABLET_TOOL_V1_ERROR_ROLE = 0,
};
#endif /* ZWP_TABLET_TOOL_V1_ERROR_ENUM */

/**
 * @ingroup iface_zwp_tablet_tool_v1
 * @struct zwp_tablet_tool_v1_listener
 */
struct zwp_tablet_tool_v1_listener {
	/**
	 * tool type
	 *
	 * The tool type is the high-level type of the tool and usually
	 * decides the interaction expected from this tool.
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet_tool.done event.
	 * @param tool_type the physical tool type
	 */
	void (*type)(void *data,
		     struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		     uint32_t tool_type);
	/**
	 * unique hardware serial number of the tool
	 *
	 * If the physical tool can be identified by a unique 64-bit
	 * serial number, this event notifies the client of this serial
	 * number.
	 *
	 * If multiple tablets are available in the same seat and the tool
	 * is uniquely identifiable by the serial number, that tool may
	 * move between tablets.
	 *
	 * Otherwise, if the tool has no serial number and this event is
	 * missing, the tool is tied to the tablet it first comes into
	 * proximity with. Even if the physical tool is used on multiple
	 * tablets, separate wp_tablet_tool objects will be created, one
	 * per tablet.
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet_tool.done event.
	 * @param hardware_serial_hi the unique serial number of the tool, most significant bits
	 * @param hardware_serial_lo the unique serial number of the tool, least significant bits
	 */
	void (*hardware_serial)(void *data,
				struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
				uint32_t hardware_serial_hi,
				uint32_t hardware_serial_lo);
	/**
	 * hardware id notification in Wacom's format
	 *
	 * This event notifies the client of a hardware id available on
	 * this tool.
	 *
	 * The hardware id is a device-specific 64-bit id that provides
	 * extra information about the tool in use, beyond the wl_tool.type
	 * enumeration. The format of the id is specific to tablets made by
	 * Wacom Inc. For example, the hardware id of a Wacom Grip Pen (a
	 * stylus) is 0x802.
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet_tool.done event.
	 * @param hardware_id_hi the hardware id, most significant bits
	 * @param hardware_id_lo the hardware id, least significant bits
	 */
	void (*hardware_id_wacom)(void *data,
				  struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
				  uint32_t hardware_id_hi,
				  uint32_t hardware_id_lo);
	/**
	 * tool capability notification
	 *
	 * This event notifies the client of any capabilities of this
	 * tool, beyond the main set of x/y axes and tip up/down detection.
	 *
	 * One event is sent for each extra capability available on this
	 * tool.
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet_tool.done event.
	 * @param capability the capability
	 */
	void (*capability)(void *data,
			   struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
			   uint32_t capability);
	/**
	 * tool description events sequence complete
	 *
	 * This event signals the end of the initial burst of descriptive
	 * events. A client may consider the static description of the tool
	 * to be complete and finalize initialization of the tool.
	 */
	void (*done)(void *data,
		     struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1);
	/**
	 * tool removed
	 *
	 * This event is sent when the tool is removed from the system
	 * and will send no further events. Should the physical tool come
	 * back into proximity later, a new wp_tablet_tool object will be
	 * created.
	 *
	 * It is compositor-dependent when a tool is removed. A compositor
	 * may remove a tool on proximity out, tablet removal or any other
	 * reason. A compositor may also keep a tool alive until shutdown.
	 *
	 * If the tool is currently in proximity, a proximity_out event
	 * will be sent before the removed event. See
	 * wp_tablet_tool.proximity_out for the handling of any buttons
	 * logically down.
	 *
	 * When this event is received, the client must
	 * wp_tablet_tool.destroy the object.
	 */
	void (*removed)(void *data,
			struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1);
	/**
	 * proximity in event
	 *
	 * Notification that this tool is focused on a certain surface.
	 *
	 * This event can be received when the tool has moved from one
	 * surface to another, or when the tool has come back into
	 * proximity above the surface.
	 *
	 * If any button is logically down when the tool comes into
	 * proximity, the respective button event is sent after the
	 * proximity_in event but within the same frame as the proximity_in
	 * event.
	 * @param tablet The tablet the tool is in proximity of
	 * @param surface The current surface the tablet tool is over
	 */
	void (*proximity_in)(void *data,
			     struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
			     uint32_t serial,
			     struct zwp_tablet_v1 *tablet,
			     struct wl_surface *surface);
	/**
	 * proximity out event
	 *
	 * Notification that this tool has either left proximity, or is
	 * no longer focused on a certain surface.
	 *
	 * When the tablet tool leaves proximity of the tablet, button
	 * release events are sent for each button that was held down at
	 * the time of leaving proximity. These events are sent before the
	 * proximity_out event but within the same wp_tablet.frame.
	 *
	 * If the tool stays within proximity of the tablet, but the focus
	 * changes from one surface to another, a button release event may
	 * not be sent until the button is actually released or the tool
	 * leaves the proximity of the tablet.
	 */
	void (*proximity_out)(void *data,
			      struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1);
	/**
	 * tablet tool is making contact
	 *
	 * Sent whenever the tablet tool comes in contact with the
	 * surface of the tablet.
	 *
	 * If the tool is already in contact with the tablet when entering
	 * the input region, the client owning said region will receive a
	 * wp_tablet.proximity_in event, followed by a wp_tablet.down event
	 * and a wp_tablet.frame event.
	 *
	 * Note that this event describes logical contact, not physical
	 * contact. On some devices, a compositor may not consider a tool
	 * in logical contact until a minimum physical pressure threshold
	 * is exceeded.
	 */
	void (*down)(void *data,
		     struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		     uint32_t serial);
	/**
	 * tablet tool is no longer making contact
	 *
	 * Sent whenever the tablet tool stops making contact with the
	 * surface of the tablet, or when the tablet tool moves out of the
	 * input region and the compositor grab (if any) is dismissed.
	 *
	 * If the tablet tool moves out of the input region while in
	 * contact with the surface of the tablet and the compositor does
	 * not have an ongoing grab on the surface, the client owning said
	 * region will receive a wp_tablet.up event, followed by a
	 * wp_tablet.proximity_out event and a wp_tablet.frame event. If
	 * the compositor has an ongoing grab on this device, this event
	 * sequence is sent whenever the grab is dismissed in the future.
	 *
	 * Note that this event describes logical contact, not physical
	 * contact. On some devices, a compositor may not consider a tool
	 * out of logical contact until physical pressure falls below a
	 * specific threshold.
	 */
	void (*up)(void *data,
		   struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1);
	/**
	 * motion event
	 *
	 * Sent whenever a tablet tool moves.
	 * @param x surface-local x coordinate
	 * @param y surface-local y coordinate
	 */
	void (*motion)(void *data,
		       struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		       wl_fixed_t x,
		       wl_fixed_t y);
	/**
	 * pressure change event
	 *
	 * Sent whenever the pressure axis on a tool changes. The value
	 * of this event is normalized to a value between 0 and 65535.
	 *
	 * Note that pressure may be nonzero even when a tool is not in
	 * logical contact. See the down and up events for more details.
	 * @param pressure The current pressure value
	 */
	void (*pressure)(void *data,
			 struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
			 uint32_t pressure);
	/**
	 * distance change event
	 *
	 * Sent whenever the distance axis on a tool changes. The value
	 * of this event is normalized to a value between 0 and 65535.
	 *
	 * Note that distance may be nonzero even when a tool is not in
	 * logical contact. See the down and up events for more details.
	 * @param distance The current distance value
	 */
	void (*distance)(void *data,
			 struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
			 uint32_t distance);
	/**
	 * tilt change event
	 *
	 * Sent whenever one or both of the tilt axes on a tool change.
	 * Each tilt value is in 0.01 of a degree, relative to the z-axis
	 * of the tablet. The angle is positive when the top of a tool
	 * tilts along the positive x or y axis.
	 * @param tilt_x The current value of the X tilt axis
	 * @param tilt_y The current value of the Y tilt axis
	 */
	void (*tilt)(void *data,
		     struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		     int32_t tilt_x,
		     int32_t tilt_y);
	/**
	 * z-rotation change event
	 *
	 * Sent whenever the z-rotation axis on the tool changes. The
	 * rotation value is in 0.01 of a degree clockwise from the tool's
	 * logical neutral position.
	 * @param degrees The current rotation of the Z axis
	 */
	void (*rotation)(void *data,
			 struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
			 int32_t degrees);
	/**
	 * Slider position change event
	 *
	 * Sent whenever the slider position on the tool changes. The
	 * value is normalized between -65535 and 65535, with 0 as the
	 * logical neutral position of the slider.
	 *
	 * The slider is available on e.g. the Wacom Airbrush tool.
	 * @param position The current position of slider
	 */
	void (*slider)(void *data,
		       struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		       int32_t position);
	/**
	 * Wheel delta event
	 *
	 * Sent whenever the wheel on the tool emits an event. This event
	 * contains two values for the same axis change. The degrees value
	 * is in 0.01 of a degree in the same orientation as the
	 * wl_pointer.vertical_scroll axis. The clicks value is in discrete
	 * logical clicks of the mouse wheel. This value may be zero if the
	 * movement of the wheel was less than one logical click.
	 *
	 * Clients should choose either value and avoid mixing degrees and
	 * clicks. The compositor may accumulate values smaller than a
	 * logical click and emulate click events when a certain threshold
	 * is met. Thus, wl_tablet_tool.wheel events with non-zero clicks
	 * values may have different degrees values.
	 * @param degrees The wheel delta in 0.01 of a degree
	 * @param clicks The wheel delta in discrete clicks
	 */
	void (*wheel)(void *data,
		      struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		      int32_t degrees,
		      int32_t clicks);
	/**
	 * button event
	 *
	 * Sent whenever a button on the tool is pressed or released.
	 *
	 * If a button is held down when the tool moves in or out of
	 * proximity, button events are generated by the compositor. See
	 * wp_tablet_tool.proximity_in and wp_tablet_tool.proximity_out for
	 * details.
	 * @param button The button whose state has changed
	 * @param state Whether the button was pressed or released
	 */
	void (*button)(void *data,
		       struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		       uint32_t serial,
		       uint32_t button,
		       uint32_t state);
	/**
	 * frame event
	 *
	 * Marks the end of a series of axis and/or button updates from
	 * the tablet. The Wayland protocol requires axis updates to be
	 * sent sequentially, however all events within a frame should be
	 * considered one hardware event.
	 * @param time The time of the event with millisecond granularity
	 */
	void (*frame)(void *data,
		      struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
		      uint32_t time);
};

/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
static inline int
zwp_tablet_tool_v1_add_listener(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1,
				const struct zwp_tablet_tool_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) zwp_tablet_tool_v1,
				     (void (**)(void)) listener, data);
}

#define ZWP_TABLET_TOOL_V1_SET_CURSOR 0
#define ZWP_TABLET_TOOL_V1_DESTROY 1

/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_TYPE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_HARDWARE_SERIAL_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_HARDWARE_ID_WACOM_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_CAPABILITY_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_DONE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_REMOVED_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_PROXIMITY_IN_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_PROXIMITY_OUT_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_DOWN_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_UP_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_MOTION_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_PRESSURE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_DISTANCE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_TILT_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_ROTATION_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_SLIDER_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_WHEEL_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_BUTTON_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_FRAME_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_SET_CURSOR_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_tool_v1
 */
#define ZWP_TABLET_TOOL_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zwp_tablet_tool_v1 */
static inline void
zwp_tablet_tool_v1_set_user_data(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zwp_tablet_tool_v1, user_data);
}

/** @ingroup iface_zwp_tablet_tool_v1 */
static inline void *
zwp_tablet_tool_v1_get_user_data(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zwp_tablet_tool_v1);
}

static inline uint32_t
zwp_tablet_tool_v1_get_version(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zwp_tablet_tool_v1);
}

/**
 * @ingroup iface_zwp_tablet_tool_v1
 *
 * Sets the surface of the cursor used for this tool on the given
 * tablet. This request only takes effect if the tool is in proximity
 * of one of the requesting client's surfaces or the surface parameter
 * is the current pointer surface. If there was a previous surface set
 * with this request it is replaced. If surface is NULL, the cursor
 * image is hidden.
 *
 * The parameters hotspot_x and hotspot_y define the position of the
 * pointer surface relative to the pointer location. Its top-left corner
 * is always at (x, y) - (hotspot_x, hotspot_y), where (x, y) are the
 * coordinates of the pointer location, in surface-local coordinates.
 *
 * On surface.attach requests to the pointer surface, hotspot_x and
 * hotspot_y are decremented by the x and y parameters passed to the
 * request. Attach must be confirmed by wl_surface.commit as usual.
 *
 * The hotspot can also be updated by passing the currently set pointer
 * surface to this request with new values for hotspot_x and hotspot_y.
 *
 * The current and pending input regions of the wl_surface are cleared,
 * and wl_surface.set_input_region is ignored until the wl_surface is no
 * longer used as the cursor. When the use as a cursor ends, the current
 * and pending input regions become undefined, and the wl_surface is
 * unmapped.
 *
 * This request gives the surface the role of a cursor. The role
 * assigned by this request is the same as assigned by
 * wl_pointer.set_cursor meaning the same surface can be
 * used both as a wl_pointer cursor and a wp_tablet cursor. If the
 * surface already has another role, it raises a protocol error.
 * The surface may be used on multiple tablets and across multiple
 * seats.
 */
static inline void
zwp_tablet_tool_v1_set_cursor(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1, uint32_t serial, struct wl_surface *surface, int32_t hotspot_x, int32_t hotspot_y)
{
	wl_proxy_marshal((struct wl_proxy *) zwp_tablet_tool_v1,
			 ZWP_TABLET_TOOL_V1_SET_CURSOR, serial, surface, hotspot_x, hotspot_y);
}

/**
 * @ingroup iface_zwp_tablet_tool_v1
 *
 * This destroys the client's resource for this tool object.
 */
static inline void
zwp_tablet_tool_v1_destroy(struct zwp_tablet_tool_v1 *zwp_tablet_tool_v1)
{
	wl_proxy_marshal((struct wl_proxy *) zwp_tablet_tool_v1,
			 ZWP_TABLET_TOOL_V1_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) zwp_tablet_tool_v1);
}

/**
 * @ingroup iface_zwp_tablet_v1
 * @struct zwp_tablet_v1_listener
 */
struct zwp_tablet_v1_listener {
	/**
	 * tablet device name
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet.done event.
	 * @param name the device name
	 */
	void (*name)(void *data,
		     struct zwp_tablet_v1 *zwp_tablet_v1,
		     const char *name);
	/**
	 * tablet device USB vendor/product id
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet.done event.
	 * @param vid USB vendor id
	 * @param pid USB product id
	 */
	void (*id)(void *data,
		   struct zwp_tablet_v1 *zwp_tablet_v1,
		   uint32_t vid,
		   uint32_t pid);
	/**
	 * path to the device
	 *
	 * A system-specific device path that indicates which device is
	 * behind this wp_tablet. This information may be used to gather
	 * additional information about the device, e.g. through libwacom.
	 *
	 * A device may have more than one device path. If so, multiple
	 * wp_tablet.path events are sent. A device may be emulated and not
	 * have a device path, and in that case this event will not be
	 * sent.
	 *
	 * The format of the path is unspecified, it may be a device node,
	 * a sysfs path, or some other identifier. It is up to the client
	 * to identify the string provided.
	 *
	 * This event is sent in the initial burst of events before the
	 * wp_tablet.done event.
	 * @param path path to local device
	 */
	void (*path)(void *data,
		     struct zwp_tablet_v1 *zwp_tablet_v1,
		     const char *path);
	/**
	 * tablet description events sequence complete
	 *
	 * This event is sent immediately to signal the end of the
	 * initial burst of descriptive events. A client may consider the
	 * static description of the tablet to be complete and finalize
	 * initialization of the tablet.
	 */
	void (*done)(void *data,
		     struct zwp_tablet_v1 *zwp_tablet_v1);
	/**
	 * tablet removed event
	 *
	 * Sent when the tablet has been removed from the system. When a
	 * tablet is removed, some tools may be removed.
	 *
	 * When this event is received, the client must wp_tablet.destroy
	 * the object.
	 */
	void (*removed)(void *data,
			struct zwp_tablet_v1 *zwp_tablet_v1);
};

/**
 * @ingroup iface_zwp_tablet_v1
 */
static inline int
zwp_tablet_v1_add_listener(struct zwp_tablet_v1 *zwp_tablet_v1,
			   const struct zwp_tablet_v1_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) zwp_tablet_v1,
				     (void (**)(void)) listener, data);
}

#define ZWP_TABLET_V1_DESTROY 0

/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_NAME_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_ID_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_PATH_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_DONE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_REMOVED_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_tablet_v1
 */
#define ZWP_TABLET_V1_DESTROY_SINCE_VERSION 1

/** @ingroup iface_zwp_tablet_v1 */
static inline void
zwp_tablet_v1_set_user_data(struct zwp_tablet_v1 *zwp_tablet_v1, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) zwp_tablet_v1, user_data);
}

/** @ingroup iface_zwp_tablet_v1 */
static inline void *
zwp_tablet_v1_get_user_data(struct zwp_tablet_v1 *zwp_tablet_v1)
{
	return wl_proxy_get_user_data((struct wl_proxy *) zwp_tablet_v1);
}

static inline uint32_t
zwp_tablet_v1_get_version(struct zwp_tablet_v1 *zwp_tablet_v1)
{
	return wl_proxy_get_version((struct wl_proxy *) zwp_tablet_v1);
}

/**
 * @ingroup iface_zwp_tablet_v1
 *
 * This destroys the client's resource for this tablet object.
 */
static inline void
zwp_tablet_v1_destroy(struct zwp_tablet_v1 *zwp_tablet_v1)
{
	wl_proxy_marshal((struct wl_proxy *) zwp_tablet_v1,
			 ZWP_TABLET_V1_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) zwp_tablet_v1);
}

#ifdef  __cplusplus
}
#endif

#endif
